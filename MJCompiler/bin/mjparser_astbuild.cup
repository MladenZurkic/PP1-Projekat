package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOREACH, PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ, RANGLE, LBRACE, RBRACE, LAMBDAOP;
terminal GT, GEQ, LT, LEQ, BITAND, BITOR, EQUAL, INC, DEC, SEMI, COMMA, DOT, LPAREN, RPAREN, LANGLE;
terminal COLON, DO, ENUM;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;

nonterminal DeclsList DeclsList;
nonterminal Decls Decls;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstsList ConstsList;
nonterminal VarDecl VarDecl;
nonterminal AngleBrackets AngleBrackets;
nonterminal MoreVarDecls MoreVarDecls;
nonterminal ClassConstrMethodDecl ClassConstrMethodDecl;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal FormParsOptional FormParsOptional;
nonterminal StatementList StatementList;
nonterminal FormPars FormPars;
nonterminal FormParsList FormParsList;
nonterminal Statement Statement;
nonterminal ElseStatementOptional ElseStatementOptional;
nonterminal NumConstOptional NumConstOptional;
nonterminal ActParsOptional ActParsOptional;
nonterminal ActPars ActPars;
nonterminal ExprCommaList ExprCommaList;
nonterminal Condition Condition;
nonterminal CondTermList CondTermList;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal AddOpTermList AddOpTermList;
nonterminal MulOpFactorList MulOpFactorList;
nonterminal Label Label;
nonterminal AssignOp AssignOp;
nonterminal RelOp RelOp;
nonterminal AddOp AddOp;
nonterminal MulOp MulOp;
nonterminal ActParsParen ActParsParen;
nonterminal ActParsParenOptional ActParsParenOptional;
nonterminal ExprOrActPars ExprOrActPars;
nonterminal GlobalVarDecl GlobalVarDecl;
nonterminal FormParsEnd FormParsEnd;
nonterminal FormParsIdent FormParsIdent;
nonterminal ExtendsOptional ExtendsOptional;
nonterminal VarDeclList VarDeclList;
nonterminal GlobalVarDeclList GlobalVarDeclList;
nonterminal VarDeclComma VarDeclComma;
nonterminal VarDeclEnd VarDeclEnd;
nonterminal VarDeclIdent VarDeclIdent;
nonterminal ConstructorDeclList ConstructorDeclList;
nonterminal ClassMethodDeclList ClassMethodDeclList;
nonterminal GlobalVarDeclIdent GlobalVarDeclIdent;
nonterminal EnteredLoop EnteredLoop;
nonterminal DesignatorArrayHelp DesignatorArrayHelp;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodTypeName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDecl, ClassDeclName, DesignatorOptional;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstsListElem, Designator, DesignatorForActPars;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorStatement, DesignatorCommaList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TypeOrVoid, Type, Expr, Factor, Consts, Term;
precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclsList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclsList ::= (Declarations) DeclsList:D1 Decls:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :}
			| 
			(NoDeclarations) {: RESULT=new NoDeclarations(); :} /* epsilon */
			;

Decls ::= (DeclsConstDecl) ConstDecl:C1 {: RESULT=new DeclsConstDecl(C1); RESULT.setLine(C1left); :}
		| (DeclsVarDecl) GlobalVarDecl:G1 {: RESULT=new DeclsVarDecl(G1); RESULT.setLine(G1left); :}
		| (DeclsClassDecl) ClassDecl:C1 {: RESULT=new DeclsClassDecl(C1); RESULT.setLine(C1left); :};


MethodDeclList ::= (MethodDeclLists) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclLists(M1, M2); RESULT.setLine(M1left); :}  
				| (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
				;

ConstDecl ::= (ConstDecl) CONST Type:type ConstsList:C1 SEMI {: RESULT=new ConstDecl(type, C1); RESULT.setLine(typeleft); :};


Consts ::= (NumberConst) NUMBER:num {: RESULT=new NumberConst(num); RESULT.setLine(numleft); :}
		| (CharConst) CHARCONST:charConst {: RESULT=new CharConst(charConst); RESULT.setLine(charConstleft); :}
		| (BoolConst) BOOLCONST:bool {: RESULT=new BoolConst(bool); RESULT.setLine(boolleft); :};
		
ConstsList ::= (ConstsLists) ConstsList:C1 COMMA ConstsListElem:C2 {: RESULT=new ConstsLists(C1, C2); RESULT.setLine(C1left); :}
			| (ConstsListSingle) ConstsListElem:C1 {: RESULT=new ConstsListSingle(C1); RESULT.setLine(C1left); :}
			;
			
ConstsListElem ::= (ConstsListElem) IDENT:id EQUAL Consts:C1 {: RESULT=new ConstsListElem(id, C1); RESULT.setLine(idleft); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

VarDecl ::= (VarDecl) Type:typeName VarDeclIdent:V1 MoreVarDecls:M2 SEMI {: RESULT=new VarDecl(typeName, V1, M2); RESULT.setLine(typeNameleft); :};

GlobalVarDecl ::= (GlobalVarDecl) Type:typeName GlobalVarDeclList:G1 {: RESULT=new GlobalVarDecl(typeName, G1); RESULT.setLine(typeNameleft); :};

GlobalVarDeclList ::= (GlobalVarDeclLists) VarDeclComma:V1 GlobalVarDeclList:G2 {: RESULT=new GlobalVarDeclLists(V1, G2); RESULT.setLine(V1left); :}
				| (GlobalVarDeclListEnd) VarDeclEnd:V1 {: RESULT=new GlobalVarDeclListEnd(V1); RESULT.setLine(V1left); :};


VarDeclComma ::= (VarDeclCommaDef) GlobalVarDeclIdent:G1 COMMA {: RESULT=new VarDeclCommaDef(G1); RESULT.setLine(G1left); :}
				| (ErrorVarDeclComma) error:err COMMA
				{: parser.report_error("Izvrsen oporavak do , (VarDeclComma) u liniji " + errleft, null);  :} {: RESULT=new ErrorVarDeclComma(); :}
				;

VarDeclEnd ::= (VarDeclEndDef) GlobalVarDeclIdent:G1 SEMI {: RESULT=new VarDeclEndDef(G1); RESULT.setLine(G1left); :}
			| (ErrorVarDeclEnd) error:err SEMI
			{: parser.report_error("Izvrsen oporavak do ; (VarDeclEnd) u liniji " + errleft, null);  :} {: RESULT=new ErrorVarDeclEnd(); :}
			;

VarDeclIdent ::= (VarDeclIdent) IDENT:ident AngleBrackets:A1 {: RESULT=new VarDeclIdent(ident, A1); RESULT.setLine(identleft); :};

GlobalVarDeclIdent ::= (GlobalVarDeclIdent) IDENT:ident AngleBrackets:A1 {: RESULT=new GlobalVarDeclIdent(ident, A1); RESULT.setLine(identleft); :};


AngleBrackets ::= (AngleBrackets) LANGLE RANGLE {: RESULT=new AngleBrackets(); :}
				| (NoAngleBrackets) {: RESULT=new NoAngleBrackets(); :} /* epsilon */
				;

MoreVarDecls ::= (MoreVarDeclsDef) MoreVarDecls:M1 COMMA VarDeclIdent:V2 {: RESULT=new MoreVarDeclsDef(M1, V2); RESULT.setLine(M1left); :}
			| (NoMoreVarDecls) {: RESULT=new NoMoreVarDecls(); :} /* epsilon */
			;

ClassDecl ::= (ClassDecl) ClassDeclName:C1 ExtendsOptional:E2 LBRACE VarDeclList:V3 ClassConstrMethodDecl:C4 RBRACE {: RESULT=new ClassDecl(C1, E2, V3, C4); RESULT.setLine(C1left); :};

ClassDeclName ::= (ClassDeclName) CLASS IDENT:className {: RESULT=new ClassDeclName(className); RESULT.setLine(classNameleft); :};

ExtendsOptional ::= (ExtendsOptionalDef) EXTENDS Type:typeName {: RESULT=new ExtendsOptionalDef(typeName); RESULT.setLine(typeNameleft); :}
			| (NoExtendsOptional) {: RESULT=new NoExtendsOptional(); :} /* epsilon */
			;

VarDeclList ::= (VarDeclLists) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclLists(V1, V2); RESULT.setLine(V1left); :}
			| (NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
			;



ClassConstrMethodDecl ::= (ClassConstrMethodDeclOnlyBraces) LBRACE RBRACE {: RESULT=new ClassConstrMethodDeclOnlyBraces(); :}
						| (ClassConstrMethodDeclOnlyConstructor) LBRACE ConstructorDeclList:C1 RBRACE {: RESULT=new ClassConstrMethodDeclOnlyConstructor(C1); RESULT.setLine(C1left); :}
						| (ClassConstrMethodDecOnlyMethod) LBRACE ClassMethodDeclList:C1 RBRACE {: RESULT=new ClassConstrMethodDecOnlyMethod(C1); RESULT.setLine(C1left); :}
						| (ClassConstrMethodDeclBoth) LBRACE ConstructorDeclList:C1 ClassMethodDeclList:C2 RBRACE {: RESULT=new ClassConstrMethodDeclBoth(C1, C2); RESULT.setLine(C1left); :}
						| (NoClassConstrMethodDecl) {: RESULT=new NoClassConstrMethodDecl(); :} /*epsilon*/
						;

ConstructorDeclList ::= (ConstructorDeclLists) ConstructorDeclList:C1 ConstructorDecl:C2 {: RESULT=new ConstructorDeclLists(C1, C2); RESULT.setLine(C1left); :}
					| (ConstructorDeclListSingle) ConstructorDecl:C1 {: RESULT=new ConstructorDeclListSingle(C1); RESULT.setLine(C1left); :};

ClassMethodDeclList ::= (ClassMethodDeclListDef) ClassMethodDeclList:C1 MethodDecl:M2 {: RESULT=new ClassMethodDeclListDef(C1, M2); RESULT.setLine(C1left); :} 
					| (ClassMethodDeclListSingle) MethodDecl:M1 {: RESULT=new ClassMethodDeclListSingle(M1); RESULT.setLine(M1left); :};


ConstructorDecl ::= (ConstructorDecl) IDENT:constName LPAREN FormParsOptional:F1 VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new ConstructorDecl(constName, F1, V2, S3); RESULT.setLine(constNameleft); :};

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormParsOptional:F2 VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) TypeOrVoid:typeName IDENT:methName {: RESULT=new MethodTypeName(typeName, methName); RESULT.setLine(typeNameleft); :};

FormParsOptional ::= (FormParsOptionalPars) FormPars:F1 {: RESULT=new FormParsOptionalPars(F1); RESULT.setLine(F1left); :}
					| (FormParsOptionalRPAREN) RPAREN {: RESULT=new FormParsOptionalRPAREN(); :}
					;

StatementList ::= (StatementListDef) StatementList:S1 Statement:S2 {: RESULT=new StatementListDef(S1, S2); RESULT.setLine(S1left); :}
				| (NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
				;

FormPars ::= (FormParsWithList) FormParsList:F1 FormPars:F2 {: RESULT=new FormParsWithList(F1, F2); RESULT.setLine(F1left); :}
			| (FormParsListEnd) FormParsEnd:F1 {: RESULT=new FormParsListEnd(F1); RESULT.setLine(F1left); :}
			;

FormParsList ::= (FormParsListWithCOMMA) FormParsIdent:F1 COMMA {: RESULT=new FormParsListWithCOMMA(F1); RESULT.setLine(F1left); :}
				| (ErrorFormParsListCOMMA) error:err COMMA
				{: parser.report_error("Izvrsen oporavak do , (FormParsList) u liniji " + errleft, null);  :} {: RESULT=new ErrorFormParsListCOMMA(); :}
				;

FormParsEnd ::= (FormParsEndWithRPAREN) FormParsIdent:F1 RPAREN {: RESULT=new FormParsEndWithRPAREN(F1); RESULT.setLine(F1left); :}
			| (ErrorFormParsEndRPAREN) error:err RPAREN
			{: parser.report_error("Izvrsen oporavak do ) (FormParsEnd) u liniji " + errleft, null);  :} {: RESULT=new ErrorFormParsEndRPAREN(); :}
			;
			
FormParsIdent ::= (FormParsIdentWithBrackets) Type:typeName IDENT:formName LANGLE RANGLE {: RESULT=new FormParsIdentWithBrackets(typeName, formName); RESULT.setLine(typeNameleft); :}
				| (FormParsIdentNoBrackets) Type:typeName IDENT:formName {: RESULT=new FormParsIdentNoBrackets(typeName, formName); RESULT.setLine(typeNameleft); :};
				
TypeOrVoid ::= (TypeOrVoidType) Type:typeName {: RESULT=new TypeOrVoidType(typeName); RESULT.setLine(typeNameleft); :}
			| (TypeOrVoidVoid) VOID:typeName {: RESULT=new TypeOrVoidVoid(); :};

Statement ::= (DesignatorStmt) DesignatorStatement:designatorStmt {: RESULT=new DesignatorStmt(designatorStmt); RESULT.setLine(designatorStmtleft); :}
			| (IfStmt) IF LPAREN Condition:condition RPAREN Statement:stmt ElseStatementOptional:E1 {: RESULT=new IfStmt(condition, stmt, E1); RESULT.setLine(conditionleft); :}
			| (WhileStmt) EnteredLoop:E1 WHILE LPAREN Condition:condition RPAREN Statement:stmt {: RESULT=new WhileStmt(E1, condition, stmt); RESULT.setLine(E1left); :}
			| (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			| (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			| (ReturnExpr) RETURN Expr:expr SEMI {: RESULT=new ReturnExpr(expr); RESULT.setLine(exprleft); :}
			| (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			| (ReadStmt) READ LPAREN Designator:designator RPAREN SEMI {: RESULT=new ReadStmt(designator); RESULT.setLine(designatorleft); :}
			| (PrintStmtNoNum) PRINT LPAREN Expr:expr RPAREN SEMI {: RESULT=new PrintStmtNoNum(expr); RESULT.setLine(exprleft); :}
			| (PrintStmtWithNum) PRINT LPAREN Expr:expr COMMA NUMBER:N1 RPAREN SEMI {: RESULT=new PrintStmtWithNum(expr, N1); RESULT.setLine(exprleft); :}
			| (ForEachStmt) Designator:designator DOT EnteredLoop:E1 FOREACH LPAREN IDENT:ident LAMBDAOP Statement:stmt RPAREN SEMI {: RESULT=new ForEachStmt(designator, E1, ident, stmt); RESULT.setLine(designatorleft); :}
			| (StmtList) LBRACE StatementList:S1 RBRACE {: RESULT=new StmtList(S1); RESULT.setLine(S1left); :}
			| (ErrorStmtIFCondition) IF LPAREN error:err RPAREN
			{: parser.report_error("Izvrsen oporavak do ) (IF condition) u liniji " + errleft, null);  :} {: RESULT=new ErrorStmtIFCondition(); :}
			;

EnteredLoop ::= (EnteredLoop) {: RESULT=new EnteredLoop(); :} ;

DesignatorStatement ::= (DesignatorStmtOptAssign) Designator:D1 AssignOp:A2 Expr:expr SEMI {: RESULT=new DesignatorStmtOptAssign(D1, A2, expr); RESULT.setLine(D1left); :}
			| (DesignatorStmtActPars) DesignatorForActPars:D1 LPAREN ActParsOptional:A2 RPAREN SEMI {: RESULT=new DesignatorStmtActPars(D1, A2); RESULT.setLine(D1left); :}
			| (DesignatorStmtOptINC) Designator:D1 INC SEMI {: RESULT=new DesignatorStmtOptINC(D1); RESULT.setLine(D1left); :}
			| (DesignatorStmtOptDEC) Designator:D1 DEC SEMI {: RESULT=new DesignatorStmtOptDEC(D1); RESULT.setLine(D1left); :}
			| (DesignatorStmtAngleBrack) LANGLE DesignatorCommaList:D1 RANGLE EQUAL Designator:D2 SEMI {: RESULT=new DesignatorStmtAngleBrack(D1, D2); RESULT.setLine(D1left); :}
			| (ErrorDesignatorStmtSEMI) error:err SEMI
			{: parser.report_error("Izvrsen oporavak do ; (DesignatorStmt) u liniji " + errleft, null);  :} {: RESULT=new ErrorDesignatorStmtSEMI(); :}
			;

ElseStatementOptional ::= (ElseStmtOpt) ELSE Statement:stmt {: RESULT=new ElseStmtOpt(stmt); RESULT.setLine(stmtleft); :}
						| (ElseStmtEpsilon) {: RESULT=new ElseStmtEpsilon(); :} /* epsilon */
						;

NumConstOptional ::= (NumConstOpt) COMMA NUMBER:N1 {: RESULT=new NumConstOpt(N1); RESULT.setLine(N1left); :}
				| (NoNumConst) {: RESULT=new NoNumConst(); :} /* epsilon */
				;

ActParsOptional ::= (ActParsOpt) ActPars:A1 {: RESULT=new ActParsOpt(A1); RESULT.setLine(A1left); :}
				| (NoActParsOpt) {: RESULT=new NoActParsOpt(); :} /* epsilon */
				;

DesignatorOptional ::= (DesignatorOpt) Designator:D1 {: RESULT=new DesignatorOpt(D1); RESULT.setLine(D1left); :}
					| (NoDesignatorOpt) {: RESULT=new NoDesignatorOpt(); :} /* epsilon */
					;

DesignatorCommaList ::= (DesignatorCommaListDef) DesignatorCommaList:D1 COMMA DesignatorOptional:D2 {: RESULT=new DesignatorCommaListDef(D1, D2); RESULT.setLine(D1left); :}
					| (DesignatorCommaListSingle) Designator:D1 {: RESULT=new DesignatorCommaListSingle(D1); RESULT.setLine(D1left); :}
					| (NoDesignatorCommaList) {: RESULT=new NoDesignatorCommaList(); :} /* epsilon */
					;

ActPars ::= (ActParsExprOnly) Expr:expr {: RESULT=new ActParsExprOnly(expr); RESULT.setLine(exprleft); :}
			| (ActParsExprList) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsExprList(A1, E2); RESULT.setLine(A1left); :};
			

ExprCommaList ::= (ExprCommaListDef) ExprCommaList:E1 COMMA Expr:expr {: RESULT=new ExprCommaListDef(E1, expr); RESULT.setLine(E1left); :}
				| (NoExprCommaList) {: RESULT=new NoExprCommaList(); :} /* epsilon */
				;

Condition ::= (ConditionCondTerm) CondTerm:C1 {: RESULT=new ConditionCondTerm(C1); RESULT.setLine(C1left); :}
			| (ConditionORCondTerm) Condition:C1 BITOR CondTerm:C2 {: RESULT=new ConditionORCondTerm(C1, C2); RESULT.setLine(C1left); :}
			;

CondTermList ::= (CondTermListDef) CondTermList:C1 BITOR CondTerm:C2 {: RESULT=new CondTermListDef(C1, C2); RESULT.setLine(C1left); :}
				| (NoCondTermList) {: RESULT=new NoCondTermList(); :} /* epsilon */
				;

CondTerm ::= (CondTermFact) CondFact:C1 {: RESULT=new CondTermFact(C1); RESULT.setLine(C1left); :}
			| (CondTermAndCondFact) CondTerm:C1 BITAND CondFact:C2 {: RESULT=new CondTermAndCondFact(C1, C2); RESULT.setLine(C1left); :}
			;
				
CondFact ::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
			| (CondFactExprRelOpExpr) Expr:expr1 RelOp:R1 Expr:expr2 {: RESULT=new CondFactExprRelOpExpr(expr1, R1, expr2); RESULT.setLine(expr1left); :};


Expr ::= (ExprMinusTerm) MINUS Term:T1 {: RESULT=new ExprMinusTerm(T1); RESULT.setLine(T1left); :}
		| (ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
		| (ExprPlusTerm) Expr:E1 AddOp:A2 Term:T3 {: RESULT=new ExprPlusTerm(E1, A2, T3); RESULT.setLine(E1left); :};

AddOpTermList ::= (AddOpTermListDef) AddOpTermList:A1 AddOp:A2 Term:term {: RESULT=new AddOpTermListDef(A1, A2, term); RESULT.setLine(A1left); :}
				| (NoAddOpTermList) {: RESULT=new NoAddOpTermList(); :} /* epsilon */
				;

Term ::= (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :}
		| (TermMulFactor) Term:T1 MulOp:M2 Factor:F3 {: RESULT=new TermMulFactor(T1, M2, F3); RESULT.setLine(T1left); :};

MulOpFactorList ::= (MulOpFactorListDef) MulOpFactorList:M1 MulOp:M2 Factor:F3 {: RESULT=new MulOpFactorListDef(M1, M2, F3); RESULT.setLine(M1left); :}
				| (NoMulOpFactorList) {: RESULT=new NoMulOpFactorList(); :} /* epsilon */
				;



Factor ::= (FactorDesignator) Designator:designator {: RESULT=new FactorDesignator(designator); RESULT.setLine(designatorleft); :}
		|  (FactorDesignatorWithParen) DesignatorForActPars:D1 LPAREN ActParsOptional:A2 RPAREN {: RESULT=new FactorDesignatorWithParen(D1, A2); RESULT.setLine(D1left); :}
		| (FactorNumber) NUMBER:num {: RESULT=new FactorNumber(num); RESULT.setLine(numleft); :}
		| (FactorChar) CHARCONST:charConst {: RESULT=new FactorChar(charConst); RESULT.setLine(charConstleft); :}
		| (FactorBool) BOOLCONST:bool {: RESULT=new FactorBool(bool); RESULT.setLine(boolleft); :}
		| (FactorNewExpr) NEW Type:typeName LANGLE Expr:expr RANGLE {: RESULT=new FactorNewExpr(typeName, expr); RESULT.setLine(typeNameleft); :}
		| (FactorNewActPars) NEW Type:typeName LPAREN ActParsOptional:A1 RPAREN {: RESULT=new FactorNewActPars(typeName, A1); RESULT.setLine(typeNameleft); :}
		| (FactorExpr) LPAREN Expr:expr RPAREN {: RESULT=new FactorExpr(expr); RESULT.setLine(exprleft); :};


DesignatorForActPars ::= (DesignatorForActPars) Designator:D1 {: RESULT=new DesignatorForActPars(D1); RESULT.setLine(D1left); :};

ActParsParen ::= (ActParsParen) LPAREN ActParsOptional:A1 RPAREN {: RESULT=new ActParsParen(A1); RESULT.setLine(A1left); :};

ActParsParenOptional ::= (ActParsParenDef) ActParsParen:A1 {: RESULT=new ActParsParenDef(A1); RESULT.setLine(A1left); :}
						| (NoActParsParen) {: RESULT=new NoActParsParen(); :} /* epsilon */
						;

ExprOrActPars ::= (ExprOrActParsExpr) LANGLE Expr:expr RANGLE {: RESULT=new ExprOrActParsExpr(expr); RESULT.setLine(exprleft); :}
				| (ExprOrActParsActPars) LPAREN ActParsOptional:A1 RPAREN {: RESULT=new ExprOrActParsActPars(A1); RESULT.setLine(A1left); :};


Designator ::= (DesignatorIdent) IDENT:ident {: RESULT=new DesignatorIdent(ident); RESULT.setLine(identleft); :}
			| (DesignatorDotIdent) Designator:designator DOT IDENT:ident {: RESULT=new DesignatorDotIdent(designator, ident); RESULT.setLine(designatorleft); :}
			| (DesignatorExpr) DesignatorArrayHelp:D1 LANGLE Expr:E2 RANGLE {: RESULT=new DesignatorExpr(D1, E2); RESULT.setLine(D1left); :}
			;

DesignatorArrayHelp ::= (DesignatorArrayHelp) Designator:D1 {: RESULT=new DesignatorArrayHelp(D1); RESULT.setLine(D1left); :};

Label ::= (Label) IDENT:ident {: RESULT=new Label(ident); RESULT.setLine(identleft); :};
AssignOp ::= (AssignOp) EQUAL {: RESULT=new AssignOp(); :};
RelOp ::= (RelEQ) EQ {: RESULT=new RelEQ(); :} | (RelNEQ) NEQ {: RESULT=new RelNEQ(); :} | (RelGT) GT {: RESULT=new RelGT(); :} | (RelGEQ) GEQ {: RESULT=new RelGEQ(); :} | (RelLT) LT {: RESULT=new RelLT(); :} | (RelLEQ) LEQ {: RESULT=new RelLEQ(); :};
AddOp ::= (AddPLUS) PLUS {: RESULT=new AddPLUS(); :} | (AddMINUS) MINUS {: RESULT=new AddMINUS(); :};
MulOp ::= (MulMUL) MUL {: RESULT=new MulMUL(); :} | (MulDIV) DIV {: RESULT=new MulDIV(); :} | (MulMOD) MOD {: RESULT=new MulMOD(); :};


