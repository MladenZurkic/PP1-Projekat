package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOREACH, IDENT, NUMBER, CHARCONST, BOOLCONST, PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ;
terminal GT, GEQ, LT, LEQ, BITAND, BITOR, EQUAL, INC, DEC, SEMI, COMMA, DOT, LPAREN, RPAREN, LANGLE;
terminal RANGLE, LBRACE, RBRACE, LAMBDAOP;
terminal  DO, ENUM, COLON;

nonterminal Program, DeclsList, Decls, MethodDeclList, ConstDecl, Consts, ConstsList;
nonterminal Type, VarDecl, AngleBrackets, MoreVarDecls, ClassDecl, ClassConstrMethodDecl;
nonterminal ExtendsOptional, VarDeclList, ConstMethodSecondPart, MethodRest;
nonterminal ConstructorDecl, FormParsOptional, StatementList, FormPars;
nonterminal FormParsList, MethodDecl, TypeOrVoid, Statement, DesignatorStatement;
nonterminal ElseStatementOptional, ExprOptional, NumConstOptional, DesignatorStatementOptional;
nonterminal ActParsOptional, DesignatorOptional, DesignatorCommaList, ActPars;
nonterminal ExprCommaList, Condition, CondTermList, CondTerm, CondFactList, CondFact;
nonterminal RelOpExprOptional, Expr, MinusOptional, AddOpTermList, Term, MulOpFactorList;
nonterminal Factor, ActParsParen, ActParsParenOptional, ExprOrActPars, Designator;
nonterminal Label, AssignOp, RelOp, AddOp, MulOp, ConstrMethodBothOptional;

/*nonterminal DesignatorElem, DesignatorList*/


precedence left ELSE;


Program ::= (Program) PROG IDENT DeclsList LBRACE MethodDeclList RBRACE;

DeclsList ::= (Declarations) DeclsList Decls
			| 
			(NoVarDecl) /* epsilon */
			;

Decls ::= (DeclsConstDecl) ConstDecl
		| (DeclsVarDecl) VarDecl
		| (DeclsClassDecl) ClassDecl;

MethodDeclList ::= MethodDeclList MethodDecl  
				|
				;

ConstDecl ::= CONST Type IDENT EQUAL Consts ConstsList SEMI;

Consts ::= NUMBER
		| CHARCONST
		| BOOLCONST;
		
ConstsList ::= ConstsList COMMA IDENT EQUAL Consts
			|
			;

Type ::= IDENT;

VarDecl ::= Type IDENT AngleBrackets MoreVarDecls SEMI;

AngleBrackets ::= LANGLE RANGLE
				|
				;

MoreVarDecls ::= MoreVarDecls COMMA IDENT AngleBrackets
			|
			;
			
ClassDecl ::= CLASS IDENT ExtendsOptional LBRACE VarDeclList ClassConstrMethodDecl RBRACE;

ExtendsOptional ::= EXTENDS Type
			|
			;

VarDeclList ::= VarDeclList VarDecl
			|
			;
			
ClassConstrMethodDecl ::= LBRACE ConstrMethodBothOptional RBRACE
						|
						;

ConstrMethodBothOptional ::= IDENT ConstMethodSecondPart ConstrMethodBothOptional
							| IDENT IDENT ConstMethodSecondPart MethodRest
							| VOID IDENT ConstMethodSecondPart MethodRest
							|
							;

ConstMethodSecondPart ::= LPAREN FormParsOptional RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodRest ::= IDENT IDENT ConstMethodSecondPart MethodRest
			| VOID IDENT ConstMethodSecondPart MethodRest
			|
			;

ConstructorDecl ::= IDENT LPAREN FormParsOptional RPAREN VarDeclList LBRACE StatementList RBRACE;

FormParsOptional ::= FormPars
					|
					;
					
StatementList ::= StatementList Statement
				|
				;

FormPars ::= Type IDENT AngleBrackets FormParsList;

FormParsList ::= FormParsList COMMA Type IDENT AngleBrackets
				|
				;
				
MethodDecl ::= TypeOrVoid IDENT LPAREN FormParsOptional RPAREN VarDeclList LBRACE StatementList RBRACE;

TypeOrVoid ::= Type
			| VOID;

Statement ::= DesignatorStatement SEMI
			| IF LPAREN Condition RPAREN Statement ElseStatementOptional
			| WHILE LPAREN Condition RPAREN Statement
			| BREAK SEMI
			| CONTINUE SEMI
			| RETURN ExprOptional SEMI
			| READ LPAREN Designator RPAREN SEMI
			| PRINT LPAREN Expr NumConstOptional RPAREN SEMI
			| Designator DOT FOREACH LPAREN IDENT LAMBDAOP Statement RPAREN SEMI
			| LBRACE StatementList RBRACE;

DesignatorStatement ::= Designator DesignatorStatementOptional
					| LANGLE DesignatorOptional DesignatorCommaList RANGLE EQUAL Designator;

ElseStatementOptional ::= ELSE Statement
						|
						;

ExprOptional ::= Expr
				|
				;

NumConstOptional ::= COMMA NUMBER
				|
				;




DesignatorStatementOptional ::= AssignOp Expr
							| LPAREN ActParsOptional RPAREN
							| INC
							| DEC;
							
ActParsOptional ::= ActPars
				|
				;

DesignatorOptional ::= Designator
					|
					;

DesignatorCommaList ::= DesignatorCommaList COMMA DesignatorOptional
					|
					;



ActPars ::= Expr ExprCommaList;

ExprCommaList ::= ExprCommaList COMMA Expr
				|
				;

Condition ::= CondTerm CondTermList;

CondTermList ::= CondTermList BITOR CondTerm
				|
				;

CondTerm ::= CondFact CondFactList;

CondFactList ::= CondFactList BITAND CondFact
				|
				;
				
CondFact ::= Expr RelOpExprOptional;

RelOpExprOptional ::= RelOp Expr
					|
					;



Expr ::= MinusOptional Term AddOpTermList;

MinusOptional ::= MINUS
			|
			;

AddOpTermList ::= AddOpTermList AddOp Term
				|
				;



Term ::= Factor MulOpFactorList;

MulOpFactorList ::= MulOpFactorList MulOp Factor
				|
				;



Factor ::= Designator ActParsParenOptional
		| NUMBER
		| CHARCONST
		| BOOLCONST
		| NEW Type ExprOrActPars
		| LPAREN Expr RPAREN;




ActParsParen ::= LPAREN ActParsOptional RPAREN;

ActParsParenOptional ::= ActParsParen
						|
						;

ExprOrActPars ::= LANGLE Expr RANGLE
				| LPAREN ActParsOptional RPAREN;



Designator ::= IDENT
			| Designator DOT IDENT
			| Designator LANGLE Expr RANGLE
			;

/*
DesignatorList ::= DesignatorList DesignatorElem;

DesignatorElem ::= DOT IDENT
				| LANGLE Expr RANGLE;
*/


Label ::= IDENT;
AssignOp ::= EQUAL;
RelOp ::= EQ | NEQ | GT | GEQ | LT | LEQ;
AddOp ::= PLUS | MINUS;
MulOp ::= MUL | DIV | MOD;


