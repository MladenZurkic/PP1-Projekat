
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 22 13:57:00 CET 2022
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

/** CUP generated class containing symbol constants. */
public class symOld {
  /* terminals */
	public static final int EOF = 0;
	public static final int error = 1;
	public static final int PROG = 2;
	public static final int BREAK = 3;
	public static final int CLASS = 4;
	public static final int ENUM = 5;
	public static final int ELSE = 6;
	public static final int CONST = 7;
	public static final int IF = 8;
	public static final int DO = 9;
	public static final int WHILE = 10;
	public static final int NEW = 11;
	public static final int PRINT = 12;
	public static final int READ = 13;
	public static final int RETURN = 14;
	public static final int VOID = 15;
	public static final int EXTENDS = 16;
	public static final int CONTINUE = 17;
	public static final int THIS = 18;
	public static final int FOREACH = 19;
	
	public static final int IDENT = 20;
	
	public static final int NUMBER = 21;
	public static final int CHARCONST = 22;
	public static final int BOOLCONST = 23;
	
	public static final int PLUS = 24;
	public static final int MINUS = 25;
	public static final int MUL = 26;
	public static final int DIV = 27;
	public static final int MOD = 28;
	public static final int EQ = 29;
	public static final int NEQ = 30;
	public static final int GT = 31;
	public static final int GEQ = 32;
	public static final int LT = 33;
	public static final int LEQ = 34;
	public static final int BITAND = 35;
	public static final int BITOR = 36;
	public static final int EQUAL = 37;
	public static final int INC = 38;
	public static final int DEC = 39;
	public static final int SEMI = 40;
	public static final int COLON = 41;
	public static final int COMMA = 42;
	public static final int DOT = 43;
	public static final int LPAREN = 44;
	public static final int RPAREN = 45;
	public static final int LANGLE = 46;
	public static final int RANGLE = 47;
	public static final int LBRACE = 48;
	public static final int RBRACE = 49;
	public static final int LAMBDAOP = 50;
}
/*
 * 
load array - loadujemo niz - STACK: array
loadujemo konstantu 0 - STACK: array, 0
uradimo aload - ucitamo array[0] - STACK: array[0]

storeujemo maxTemp - sacuvamo nulti element - STACK: /

load array - loadujemo niz - STACK: array
loadujemo konstantu 0 - STACK: array, 0 // ODAVDE BROJIMO

loopAdresa - cuvamo Code.pc ovde

Loadujemo CONST_1 - STACK: STACK: array, 0, 1
addujemo dva broja - STACK: array, 1
dup2 - STACK: array, 1(i), array, 1(i)
popujemo i - STACK: array, 1(i), array

// vrh je array

arraylength - - STACK: array, 1(i), arrlen

dup2 - STACK: array, 1(i), arrlen, 1(i), arrlen
pop - STACK: array, 1(i), arrlen, 1(i)

dup_x1  - STACK: array, 1(i), 1(i), arrlen, 1(i)
pop  - - STACK: array, 1(i), 1(i), arrlen

sacuvamo zavrsenopass = Code.pc + 1
falsejump od lt, 0


STACK: array, 1(i)
/*BODY IDE

dup2 - STACK: array, 1(i), array, 1(i)
aload -  STACK: array, 1(i), arr[i]
loadujemo maxTemp - STACK: array, 1(i), arr[i], maxTemp

dup2 - STACK: array, 1(i), arr[i], maxTemp, arr[i], maxTemp

//deo za vece

sacuvamo jmp -  Code.pc + 1;
falseJump gt, 0


STACK: array, 1(i), arr[i], maxTemp

//OVDE SMO AKO JE PRVI VECI OD DRUGOG
popujemo STACK: array, 1(i), arr[i] 

jmp2 je Code.pc + 1;
putJump(0) 

fixup(jmp) - OVDE SMO AKO JE DRUGI VECI OD PRVOG
STACK: array, 1(i), arr[i], maxTemp
dup_x1 - STACK: array, 1(i), maxTemp, arr[i], maxTemp
pop - STACK: array, 1(i), maxTemp, arr[i]
pop - STACK: array, 1(i), maxTemp

fixup(jmp2) - SKACEMO KAD JE PRVI VECI

store(maxTemp) - sacuvamo taj max element ovde jer je na vrhu steka posle - STACK: array, 1(i)

/* END BODY IDE

putJump(loopAdresa)
fixup (zavrsenopass)
pop
pop

I TO JE KRAJ, MI SMO SAD OVDE RADILI LOAD da imamo tu vrednost na steku
load od maxTemp;
}*/
