package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOREACH, IDENT, PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ;
terminal GT, GEQ, LT, LEQ, BITAND, BITOR, EQUAL, INC, DEC, SEMI, COMMA, DOT, LPAREN, RPAREN, LANGLE;
terminal RANGLE, LBRACE, RBRACE, LAMBDAOP;
terminal  DO, ENUM, COLON;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;

nonterminal Program, DeclsList, Decls, MethodDeclList, ConstDecl, Consts, ConstsList;
nonterminal Type, VarDecl, AngleBrackets, MoreVarDecls, ClassDecl, ClassConstrMethodDecl;
nonterminal ExtendsOptional, VarDeclList, ConstMethodSecondPart, MethodRest;
nonterminal ConstructorDecl, FormParsOptional, StatementList, FormPars;
nonterminal FormParsList, MethodDecl, TypeOrVoid, Statement, DesignatorStatement;
nonterminal ElseStatementOptional, ExprOptional, NumConstOptional, DesignatorStatementOptional;
nonterminal ActParsOptional, DesignatorOptional, DesignatorCommaList, ActPars;
nonterminal ExprCommaList, Condition, CondTermList, CondTerm, CondFactList, CondFact;
nonterminal RelOpExprOptional, Expr, MinusOptional, AddOpTermList, Term, MulOpFactorList;
nonterminal Factor, ActParsParen, ActParsParenOptional, ExprOrActPars, Designator;
nonterminal Label, AssignOp, RelOp, AddOp, MulOp, ConstrMethodBothOptional, ConstsListElem;
nonterminal VarDeclErrorPossible, FormParsEnd, FormParsIdent;

/*nonterminal DesignatorElem, DesignatorList*/

nonterminal VarDeclListBasic, VarDeclComma, VarDeclEnd, VarDeclIdent;

precedence left ELSE;

Program ::= (Program) PROG IDENT DeclsList LBRACE MethodDeclList RBRACE;

DeclsList ::= (Declarations) DeclsList Decls
			| 
			(NoVarDecl) /* epsilon */
			;

Decls ::= (DeclsConstDecl) ConstDecl
		| (DeclsVarDecl) VarDeclErrorPossible
		| (DeclsClassDecl) ClassDecl;



MethodDeclList ::= MethodDeclList MethodDecl  
				| (NoMethodDeclList) /* epsilon */
				;

ConstDecl ::= (ConstDeclDef) CONST Type ConstsList SEMI;
			

Consts ::= (ConstsNumber) NUMBER
		| (ConstsCharConst) CHARCONST
		| (ConstsBoolConst) BOOLCONST;
		
ConstsList ::= (ConstsListDef) ConstsList COMMA ConstsListElem
			| (ConstsListElemInList) ConstsListElem
			;
			
ConstsListElem ::= (ConstsListElem) IDENT:id EQUAL Consts:value;

Type ::= (Type) IDENT;

VarDecl ::= (DefVarDecl) Type VarDeclIdent MoreVarDecls SEMI;

VarDeclErrorPossible ::= (VarDeclErrorPossible) Type VarDeclListBasic;

VarDeclListBasic ::= VarDeclComma VarDeclListBasic
				| VarDeclEnd;


VarDeclComma ::= (VarDeclCommaDef) VarDeclIdent COMMA
				| (ErrorVarDeclListBasic) error:err COMMA
				{: parser.report_error("Izvrsen oporavak do , (VarDeclComma) u liniji " + errleft, null);  :}
				;

VarDeclEnd ::= (VarDeclEndDef) VarDeclIdent SEMI
			| (ErrorVarDecl) error:err SEMI
			{: parser.report_error("Izvrsen oporavak do ; (VarDeclEnd) u liniji " + errleft, null);  :}
			;

VarDeclIdent ::= (VarDeclIdent) IDENT AngleBrackets;


AngleBrackets ::= (AngleBrackets) LANGLE RANGLE
				| (NoAngleBrackets)
				;

MoreVarDecls ::= (MoreVarDeclsDef) MoreVarDecls COMMA VarDeclIdent
			|
			;
			
ClassDecl ::= (ClassDecl) CLASS IDENT ExtendsOptional LBRACE VarDeclList ClassConstrMethodDecl RBRACE;

ExtendsOptional ::= (ExtendsOptionalDef) EXTENDS Type
			| (ExtendsOptionalEpsilon)
			;

VarDeclList ::= (VarDeclsList) VarDeclList VarDecl
			| (VarDeclsListEpsilon)
			;
			
ClassConstrMethodDecl ::= LBRACE ConstrMethodBothOptional RBRACE
						|
						;

ConstrMethodBothOptional ::= IDENT ConstMethodSecondPart ConstrMethodBothOptional
							| IDENT IDENT ConstMethodSecondPart MethodRest
							| VOID IDENT ConstMethodSecondPart MethodRest
							|
							;

ConstMethodSecondPart ::= LPAREN FormParsOptional VarDeclList LBRACE StatementList RBRACE;

MethodRest ::= IDENT IDENT ConstMethodSecondPart MethodRest
			| VOID IDENT ConstMethodSecondPart MethodRest
			|
			;

ConstructorDecl ::= IDENT LPAREN FormParsOptional VarDeclList LBRACE StatementList RBRACE;

FormParsOptional ::= FormPars
					| RPAREN
					;
					
StatementList ::= StatementList Statement
				|
				;

FormPars ::= FormParsList FormPars
			| FormParsEnd
			;

FormParsList ::= FormParsIdent COMMA
				| error:err COMMA
				{: parser.report_error("Izvrsen oporavak do , (FormParsList) u liniji " + errleft, null);  :}
				;
				
FormParsEnd ::= FormParsIdent RPAREN
			| error:err RPAREN
			{: parser.report_error("Izvrsen oporavak do ) (FormParsEnd) u liniji " + errleft, null);  :}
			;
			
FormParsIdent ::= Type IDENT AngleBrackets;
				
MethodDecl ::= TypeOrVoid IDENT LPAREN FormParsOptional VarDeclList LBRACE StatementList RBRACE;

TypeOrVoid ::= Type
			| VOID;

Statement ::= DesignatorStatement
			| IF LPAREN Condition RPAREN Statement ElseStatementOptional
			| WHILE LPAREN Condition RPAREN Statement
			| BREAK SEMI
			| CONTINUE SEMI
			| RETURN ExprOptional SEMI
			| READ LPAREN Designator RPAREN SEMI
			| (PrintStmt) PRINT LPAREN Expr NumConstOptional RPAREN SEMI
			| Designator DOT FOREACH LPAREN IDENT LAMBDAOP Statement RPAREN SEMI
			| LBRACE StatementList RBRACE
			| IF LPAREN error:err RPAREN
			{: parser.report_error("Izvrsen oporavak do ) (IF condition) u liniji " + errleft, null);  :}
			;

DesignatorStatement ::= Designator DesignatorStatementOptional SEMI
					| LANGLE DesignatorOptional DesignatorCommaList RANGLE EQUAL Designator SEMI
					| error:err SEMI
					{: parser.report_error("Izvrsen oporavak do ; (DesignatorStmt) u liniji " + errleft, null);  :}
					;

ElseStatementOptional ::= ELSE Statement
						|
						;

ExprOptional ::= Expr
				|
				;

NumConstOptional ::= COMMA NUMBER
				|
				;




DesignatorStatementOptional ::= AssignOp Expr
							| LPAREN ActParsOptional RPAREN
							| INC
							| DEC;
							
ActParsOptional ::= ActPars
				|
				;

DesignatorOptional ::= Designator
					|
					;

DesignatorCommaList ::= DesignatorCommaList COMMA DesignatorOptional
					|
					;



ActPars ::= Expr ExprCommaList;

ExprCommaList ::= ExprCommaList COMMA Expr
				|
				;

Condition ::= CondTerm CondTermList;

CondTermList ::= CondTermList BITOR CondTerm
				|
				;

CondTerm ::= CondFact CondFactList;

CondFactList ::= CondFactList BITAND CondFact
				|
				;
				
CondFact ::= Expr RelOpExprOptional;

RelOpExprOptional ::= RelOp Expr
					|
					;



Expr ::= MinusOptional Term AddOpTermList;

MinusOptional ::= MINUS
			|
			;

AddOpTermList ::= AddOpTermList AddOp Term
				|
				;



Term ::= Factor MulOpFactorList;

MulOpFactorList ::= MulOpFactorList MulOp Factor
				|
				;



Factor ::= Designator ActParsParenOptional
		| NUMBER
		| CHARCONST
		| BOOLCONST
		| NEW Type ExprOrActPars
		| LPAREN Expr RPAREN;




ActParsParen ::= LPAREN ActParsOptional RPAREN;

ActParsParenOptional ::= ActParsParen
						|
						;

ExprOrActPars ::= LANGLE Expr RANGLE
				| LPAREN ActParsOptional RPAREN;



Designator ::= IDENT
			| Designator DOT IDENT
			| Designator LANGLE Expr RANGLE
			;

Label ::= IDENT;
AssignOp ::= EQUAL;
RelOp ::= EQ | NEQ | GT | GEQ | LT | LEQ;
AddOp ::= PLUS | MINUS;
MulOp ::= MUL | DIV | MOD;


