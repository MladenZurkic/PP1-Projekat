package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOREACH, PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ, RANGLE, LBRACE, RBRACE, LAMBDAOP;
terminal GT, GEQ, LT, LEQ, BITAND, BITOR, EQUAL, INC, DEC, SEMI, COMMA, DOT, LPAREN, RPAREN, LANGLE;
terminal COLON, DO, ENUM;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;

nonterminal DeclsList, Decls, MethodDeclList, ConstDecl, ConstsList;
nonterminal VarDecl, AngleBrackets, MoreVarDecls, ClassConstrMethodDecl;
nonterminal ConstructorDecl, FormParsOptional, StatementList, FormPars;
nonterminal FormParsList, Statement, DesignatorStatement;
nonterminal ElseStatementOptional, NumConstOptional, DesignatorStatementOptional;
nonterminal ActParsOptional, DesignatorOptional, DesignatorCommaList, ActPars;
nonterminal ExprCommaList, Condition, CondTermList, CondTerm, CondFactList, CondFact;
nonterminal AddOpTermList, MulOpFactorList;
nonterminal ActParsParen, ActParsParenOptional, ExprOrActPars, Designator;
nonterminal Label, AssignOp, RelOp, AddOp, MulOp;
nonterminal GlobalVarDecl, FormParsEnd, FormParsIdent, ExtendsOptional, VarDeclList;
nonterminal GlobalVarDeclList, VarDeclComma, VarDeclEnd, VarDeclIdent;
nonterminal ConstructorDeclList, ClassMethodDeclList, GlobalVarDeclIdent;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodTypeName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDecl, ClassDeclName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstsListElem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TypeOrVoid, Type, Expr, Factor, Consts, Term;
precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclsList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclsList ::= (Declarations) DeclsList Decls
			| 
			(NoDeclarations) /* epsilon */
			;

Decls ::= (DeclsConstDecl) ConstDecl
		| (DeclsVarDecl) GlobalVarDecl
		| (DeclsClassDecl) ClassDecl;


MethodDeclList ::= (MethodDeclLists) MethodDeclList MethodDecl  
				| (NoMethodDeclList) /* epsilon */
				;

ConstDecl ::= (ConstDecl) CONST Type:type ConstsList SEMI;


Consts ::= (NumberConst) NUMBER:num
		| (CharConst) CHARCONST:charConst
		| (BoolConst) BOOLCONST:bool;
		
ConstsList ::= (ConstsLists) ConstsList COMMA ConstsListElem
			| (ConstsListSingle) ConstsListElem
			;
			
ConstsListElem ::= (ConstsListElem) IDENT:id EQUAL Consts;

Type ::= (Type) IDENT:typeName;

VarDecl ::= (VarDecl) Type:typeName VarDeclIdent MoreVarDecls SEMI;

GlobalVarDecl ::= (GlobalVarDecl) Type:typeName GlobalVarDeclList;

GlobalVarDeclList ::= (GlobalVarDeclLists) VarDeclComma GlobalVarDeclList
				| (GlobalVarDeclListEnd) VarDeclEnd;


VarDeclComma ::= (VarDeclCommaDef) GlobalVarDeclIdent COMMA
				| (ErrorVarDeclComma) error:err COMMA
				{: parser.report_error("Izvrsen oporavak do , (VarDeclComma) u liniji " + errleft, null);  :}
				;

VarDeclEnd ::= (VarDeclEndDef) GlobalVarDeclIdent SEMI
			| (ErrorVarDeclEnd) error:err SEMI
			{: parser.report_error("Izvrsen oporavak do ; (VarDeclEnd) u liniji " + errleft, null);  :}
			;

VarDeclIdent ::= (VarDeclIdent) IDENT:ident AngleBrackets;

GlobalVarDeclIdent ::= (GlobalVarDeclIdent) IDENT:ident AngleBrackets;


AngleBrackets ::= (AngleBrackets) LANGLE RANGLE
				| (NoAngleBrackets) /* epsilon */
				;

MoreVarDecls ::= (MoreVarDeclsDef) MoreVarDecls COMMA VarDeclIdent
			| (NoMoreVarDecls) /* epsilon */
			;

ClassDecl ::= (ClassDecl) ClassDeclName ExtendsOptional LBRACE VarDeclList ClassConstrMethodDecl RBRACE;

ClassDeclName ::= (ClassDeclName) CLASS IDENT:className;

ExtendsOptional ::= (ExtendsOptionalDef) EXTENDS Type:typeName
			| (NoExtendsOptional) /* epsilon */
			;

VarDeclList ::= (VarDeclLists) VarDeclList VarDecl
			| (NoVarDeclList) /* epsilon */
			;



ClassConstrMethodDecl ::= (ClassConstrMethodDeclOnlyBraces) LBRACE RBRACE
						| (ClassConstrMethodDeclOnlyConstructor) LBRACE ConstructorDeclList RBRACE
						| (ClassConstrMethodDecOnlyMethod) LBRACE ClassMethodDeclList RBRACE
						| (ClassConstrMethodDeclBoth) LBRACE ConstructorDeclList ClassMethodDeclList RBRACE
						| (NoClassConstrMethodDecl) /*epsilon*/
						;

ConstructorDeclList ::= (ConstructorDeclLists) ConstructorDeclList ConstructorDecl
					| (ConstructorDeclListSingle) ConstructorDecl;

ClassMethodDeclList ::= (ClassMethodDeclListDef) ClassMethodDeclList MethodDecl 
					| (ClassMethodDeclListSingle) MethodDecl;


ConstructorDecl ::= (ConstructorDecl) IDENT:constName LPAREN FormParsOptional VarDeclList LBRACE StatementList RBRACE;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormParsOptional VarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodTypeName) TypeOrVoid:typeName IDENT:methName;

FormParsOptional ::= (FormParsOptionalPars) FormPars
					| (FormParsOptionalRPAREN) RPAREN
					;

StatementList ::= (StatementListDef) StatementList Statement
				| (NoStatementList) /* epsilon */
				;

FormPars ::= (FormParsWithList) FormParsList FormPars
			| (FormParsListEnd) FormParsEnd
			;

FormParsList ::= (FormParsListWithCOMMA) FormParsIdent COMMA
				| (ErrorFormParsListCOMMA) error:err COMMA
				{: parser.report_error("Izvrsen oporavak do , (FormParsList) u liniji " + errleft, null);  :}
				;

FormParsEnd ::= (FormParsEndWithRPAREN) FormParsIdent RPAREN
			| (ErrorFormParsEndRPAREN) error:err RPAREN
			{: parser.report_error("Izvrsen oporavak do ) (FormParsEnd) u liniji " + errleft, null);  :}
			;
			
FormParsIdent ::= (FormParsIdent) Type:typeName IDENT:formName AngleBrackets;
				
TypeOrVoid ::= (TypeOrVoidType) Type:typeName
			| (TypeOrVoidVoid) VOID:typeName;

Statement ::= (DesignatorStmt) DesignatorStatement:designatorStmt
			| (IfStmt) IF LPAREN Condition:condition RPAREN Statement:stmt ElseStatementOptional
			| (WhileStmt) WHILE LPAREN Condition:condition RPAREN Statement:stmt
			| (BreakStmt) BREAK SEMI
			| (ContinueStmt) CONTINUE SEMI
			| (ReturnExpr) RETURN Expr:expr SEMI
			| (ReturnNoExpr) RETURN SEMI
			| (ReadStmt) READ LPAREN Designator:designator RPAREN SEMI
			| (PrintStmt) PRINT LPAREN Expr:expr NumConstOptional:numOpt RPAREN SEMI
			| (ForEachStmt) Designator:designator DOT FOREACH LPAREN IDENT:ident LAMBDAOP Statement:stmt RPAREN SEMI
			| (StmtList) LBRACE StatementList RBRACE
			| (ErrorStmtIFCondition) IF LPAREN error:err RPAREN
			{: parser.report_error("Izvrsen oporavak do ) (IF condition) u liniji " + errleft, null);  :}
			;

DesignatorStatement ::= (DesignatorStmtDef) Designator DesignatorStatementOptional SEMI
					| (DesignatorStmtAngleBrack) LANGLE DesignatorOptional DesignatorCommaList RANGLE EQUAL Designator SEMI
					| (ErrorDesignatorStmtSEMI) error:err SEMI
					{: parser.report_error("Izvrsen oporavak do ; (DesignatorStmt) u liniji " + errleft, null);  :}
					;

ElseStatementOptional ::= (ElseStmtOpt) ELSE Statement:stmt
						| (ElseStmtEpsilon) /* epsilon */
						;

NumConstOptional ::= (NumConstOpt) COMMA NUMBER
				| (NoNumConst) /* epsilon */
				;


DesignatorStatementOptional ::= (DesignatorStmtOptAssign) AssignOp Expr:expr
							| (DesignatorStmtOptActPars) LPAREN ActParsOptional RPAREN
							| (DesignatorStmtOptINC) INC
							| (DesignatorStmtOptDEC) DEC;

ActParsOptional ::= (ActParsOpt) ActPars
				| (NoActParsOpt) /* epsilon */
				;

DesignatorOptional ::= (DesignatorOpt) Designator
					| (NoDesignatorOpt) /* epsilon */
					;

DesignatorCommaList ::= (DesignatorCommaListDef) DesignatorCommaList COMMA DesignatorOptional
					| (NoDesignatorCommaList) /* epsilon */
					;



ActPars ::= (ActPars) Expr:expr ExprCommaList;

ExprCommaList ::= (ExprCommaListDef) ExprCommaList COMMA Expr:expr
				| (NoExprCommaList) /* epsilon */
				;

Condition ::= (Condition) CondTerm CondTermList;

CondTermList ::= (CondTermListDef) CondTermList BITOR CondTerm
				| (NoCondTermList) /* epsilon */
				;

CondTerm ::= (CondTerm) CondFact CondFactList;

CondFactList ::= (CondFactListDef) CondFactList BITAND CondFact
				| (NoCondFactList) /* epsilon */
				;
				
CondFact ::= (CondFactExpr) Expr
			| (CondFactExprRelOpExpr) Expr:expr1 RelOp Expr:expr2;


Expr ::= (ExprMinusTerm) MINUS Term
		| (ExprTerm) Term
		| (ExprPlusTerm) Expr AddOp Term;

AddOpTermList ::= (AddOpTermListDef) AddOpTermList AddOp Term:term
				| (NoAddOpTermList) /* epsilon */
				;

Term ::= (TermFactor) Factor
		| (TermMulFactor) Term MulOp Factor;

MulOpFactorList ::= (MulOpFactorListDef) MulOpFactorList MulOp Factor
				| (NoMulOpFactorList) /* epsilon */
				;



Factor ::= (FactorDesignator) Designator:designator
		|  (FactorDesignatorWithParen) Designator:designator LPAREN ActParsOptional RPAREN
		| (FactorNumber) NUMBER:num
		| (FactorChar) CHARCONST:charConst
		| (FactorBool) BOOLCONST:bool
		| (FactorNewExpr) NEW Type:typeName LANGLE Expr:expr RANGLE
		| (FactorNewActPars) NEW Type:typeName LPAREN ActParsOptional RPAREN
		| (FactorExpr) LPAREN Expr:expr RPAREN;


ActParsParen ::= (ActParsParen) LPAREN ActParsOptional RPAREN;

ActParsParenOptional ::= (ActParsParenDef) ActParsParen
						| (NoActParsParen) /* epsilon */
						;

ExprOrActPars ::= (ExprOrActParsExpr) LANGLE Expr:expr RANGLE
				| (ExprOrActParsActPars) LPAREN ActParsOptional RPAREN;


Designator ::= (DesignatorIdent) IDENT:ident
			| (DesignatorDotIdent) Designator:designator DOT IDENT:ident
			| (DesignatorExpr) Designator:designator LANGLE Expr RANGLE
			;

Label ::= (Label) IDENT:ident;
AssignOp ::= (AssignOp) EQUAL;
RelOp ::= (RelEQ) EQ | (RelNEQ) NEQ | (RelGT) GT | (RelGEQ) GEQ | (RelLT) LT | (RelLEQ) LEQ;
AddOp ::= (AddPLUS) PLUS | (AddMINUS) MINUS;
MulOp ::= (MulMUL) MUL | (MulDIV) DIV | (MulMOD) MOD;


